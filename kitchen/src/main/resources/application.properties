server.port=${PORT:2020}

# Begin h2 configuration
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console
#spring.h2.console.settings.web-allow-others=true
# End h2 configuration

# Begin PostgreSQL local configuration
#spring.datasource.url=jdbc:postgresql://localhost:5432/dbkitchen
#spring.datasource.username=postgres
#spring.datasource.password=${MYDBPASSWORD:basketball714}
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
## End PostgreSQL local configuration

# Begin PostgreSQL heroku configuration
spring.datasource.url=${SPRING_DATA_URL:jdbc:postgresql://ec2-174-129-41-127.compute-1.amazonaws.com:5432/dbrhrt457obeoa?user=uhxcjarvzalwqh&password=88d38750f1033df88ee954d3661479abb197e942d852d1ea37f76623b7d6e2b2&sslmode=require}
spring.datasource.username=uhxcjarvzalwqh
spring.datasource.password=88d38750f1033df88ee954d3661479abb197e942d852d1ea37f76623b7d6e2b2
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
## End PostgreSQL heroku configuration

# What do with the schema
# drop n create table again, good for testing
spring.jpa.hibernate.ddl-auto=none
spring.datasource.initialization-mode=never

# Good for production!
#spring.jpa.hibernate.ddl-auto=update
#spring.datasource.initialization-mode=never


# Feature that determines what happens when no accessors are found for a type
# (and there are no annotations to indicate it is meant to be serialized).
spring.jackson.serialization.fail-on-empty-beans=false

# Turns off Spring Boot automatic exception handling
server.error.whitelabel.enabled=false

# needed for actuators to work
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoint.shutdown.enabled=true

#postgres://uhxcjarvzalwqh:88d38750f1033df88ee954d3661479abb197e942d852d1ea37f76623b7d6e2b2@ec2-174-129-41-127.compute-1.amazonaws.com:5432/dbrhrt457obeoa